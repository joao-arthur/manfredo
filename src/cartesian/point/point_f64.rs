#[derive(PartialEq, Debug, Clone)]
pub struct PointF64 {
    pub x: f64,
    pub y: f64,
}

impl PointF64 {
    pub fn of(x: f64, y: f64) -> Self {
        PointF64 { x, y }
    }
}

impl std::fmt::Display for PointF64 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "({}, {})", self.x, self.y)
    }
}

#[cfg(test)]
mod tests {
    use super::PointF64;

    #[test]
    fn point_u8() {
        assert_eq!(PointF64::of(f64::MIN, f64::MAX), PointF64 { x: f64::MIN, y: f64::MAX });
        assert_eq!(
            PointF64::of(f64::MIN, f64::MAX).to_string(),
            [
                "(",
                "-1797693134862315700000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                ", ",
                "17976931348623157000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "00000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000)",
            ]
            .join("")
        );
    }
}
